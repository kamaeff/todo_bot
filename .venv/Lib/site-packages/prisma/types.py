# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    todo: 'TodoCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    chat_id: _str
    username: _str
    user_tag: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    chat_id: _str
    username: _str
    user_tag: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_chat_id_Input = TypedDict(
    '_UserWhereUnique_chat_id_Input',
    {
        'chat_id': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_chat_id_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: Union[AtomicIntInput, _int]
    chat_id: _str
    username: _str
    user_tag: _str
    todo: 'TodoUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: Union[AtomicIntInput, _int]
    chat_id: _str
    username: _str
    user_tag: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_chat_id_OrderByInput = TypedDict(
    '_User_chat_id_OrderByInput',
    {
        'chat_id': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_user_tag_OrderByInput = TypedDict(
    '_User_user_tag_OrderByInput',
    {
        'user_tag': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_id_OrderByInput',
    '_User_chat_id_OrderByInput',
    '_User_username_OrderByInput',
    '_User_user_tag_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    todo: Union[bool, 'FindManyTodoArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    todo: Union[bool, 'FindManyTodoArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    todo: Union[bool, 'FindManyTodoArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    todo: Union[bool, 'FindManyTodoArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    todo: Union[bool, 'FindManyTodoArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class TodoIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class TodoIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class TodoIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class TodoIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TodoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTodoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    chat_id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    user_tag: Union[_str, 'types.StringFilter']
    todo: 'TodoListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    chat_id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    user_tag: Union[_str, 'types.StringFilter']
    todo: 'TodoListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    chat_id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    user_tag: Union[_str, 'types.StringFilter']
    todo: 'TodoListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    chat_id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    user_tag: Union[_str, 'types.StringFilter']
    todo: 'TodoListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    chat_id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    user_tag: Union[_str, 'types.StringFilter']
    todo: 'TodoListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    chat_id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    user_tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    chat_id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    user_tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    chat_id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    user_tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    chat_id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    user_tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    chat_id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    user_tag: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    chat_id: _str
    username: _str
    user_tag: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    chat_id: _str
    username: _str
    user_tag: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    createdAt: bool
    updatedAt: bool
    id: bool
    chat_id: bool
    username: bool
    user_tag: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    createdAt: bool
    updatedAt: bool
    id: bool
    chat_id: bool
    username: bool
    user_tag: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'createdAt': bool,
        'updatedAt': bool,
        'id': bool,
        'chat_id': bool,
        'username': bool,
        'user_tag': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'createdAt': int,
        'updatedAt': int,
        'id': int,
        'chat_id': int,
        'username': int,
        'user_tag': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'createdAt',
    'updatedAt',
    'id',
    'chat_id',
    'username',
    'user_tag',
    'todo',
]
UserScalarFieldKeys = Literal[
    'createdAt',
    'updatedAt',
    'id',
    'chat_id',
    'username',
    'user_tag',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'todo',
    ]

# Todo types

class TodoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Todo create method"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    status: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _str


class TodoCreateInput(TodoOptionalCreateInput):
    """Required arguments to the Todo create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TodoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Todo create method, without relations"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    status: _str
    userId: _str


class TodoCreateWithoutRelationsInput(TodoOptionalCreateWithoutRelationsInput):
    """Required arguments to the Todo create method, without relations"""
    text: _str


class TodoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TodoCreateWithoutRelationsInput'
    connect: 'TodoWhereUniqueInput'


class TodoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TodoCreateWithoutRelationsInput', List['TodoCreateWithoutRelationsInput']]
    connect: Union['TodoWhereUniqueInput', List['TodoWhereUniqueInput']]


_TodoWhereUnique_id_Input = TypedDict(
    '_TodoWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

TodoWhereUniqueInput = _TodoWhereUnique_id_Input


class TodoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: Union[AtomicIntInput, _int]
    text: _str
    status: _str
    user: 'UserUpdateOneWithoutRelationsInput'


class TodoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: Union[AtomicIntInput, _int]
    text: _str
    status: _str


class TodoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TodoCreateWithoutRelationsInput']
    connect: List['TodoWhereUniqueInput']
    set: List['TodoWhereUniqueInput']
    disconnect: List['TodoWhereUniqueInput']
    delete: List['TodoWhereUniqueInput']

    # TODO
    # update: List['TodoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TodoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TodoScalarWhereInput']
    # upsert: List['TodoUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['TodoCreateOrConnectWithoutRelationsInput']


class TodoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TodoCreateWithoutRelationsInput'
    connect: 'TodoWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TodoUpdateInput'
    # upsert: 'TodoUpsertWithoutRelationsInput'
    # connectOrCreate: 'TodoCreateOrConnectWithoutRelationsInput'


class TodoUpsertInput(TypedDict):
    create: 'TodoCreateInput'
    update: 'TodoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Todo_createdAt_OrderByInput = TypedDict(
    '_Todo_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Todo_updatedAt_OrderByInput = TypedDict(
    '_Todo_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Todo_id_OrderByInput = TypedDict(
    '_Todo_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Todo_text_OrderByInput = TypedDict(
    '_Todo_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_Todo_status_OrderByInput = TypedDict(
    '_Todo_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Todo_userId_OrderByInput = TypedDict(
    '_Todo_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

TodoOrderByInput = Union[
    '_Todo_createdAt_OrderByInput',
    '_Todo_updatedAt_OrderByInput',
    '_Todo_id_OrderByInput',
    '_Todo_text_OrderByInput',
    '_Todo_status_OrderByInput',
    '_Todo_userId_OrderByInput',
]



# recursive Todo types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TodoRelationFilter = TypedDict(
    'TodoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TodoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TodoInclude(TypedDict, total=False):
    """Todo relational arguments"""
    user: Union[bool, 'UserArgsFromTodo']


    

class UserIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    todo: Union[bool, 'FindManyTodoArgsFromTodoRecursive1']


class UserIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    todo: Union[bool, 'FindManyTodoArgsFromTodoRecursive2']


class UserIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    todo: Union[bool, 'FindManyTodoArgsFromTodoRecursive3']


class UserIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    todo: Union[bool, 'FindManyTodoArgsFromTodoRecursive4']


class UserIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class UserArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyUserArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive1']


class TodoIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive2']


class TodoIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive3']


class TodoIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive4']


class TodoIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class TodoArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyTodoArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    


FindManyTodoArgs = FindManyTodoArgsFromTodo
FindFirstTodoArgs = FindManyTodoArgsFromTodo


    

class TodoWhereInput(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['TodoWhereInputRecursive1', List['TodoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TodoWhereInputRecursive1']
    OR: List['TodoWhereInputRecursive1']
    NOT: List['TodoWhereInputRecursive1']


class TodoWhereInputRecursive1(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['TodoWhereInputRecursive2', List['TodoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TodoWhereInputRecursive2']
    OR: List['TodoWhereInputRecursive2']
    NOT: List['TodoWhereInputRecursive2']


class TodoWhereInputRecursive2(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['TodoWhereInputRecursive3', List['TodoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TodoWhereInputRecursive3']
    OR: List['TodoWhereInputRecursive3']
    NOT: List['TodoWhereInputRecursive3']


class TodoWhereInputRecursive3(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['TodoWhereInputRecursive4', List['TodoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TodoWhereInputRecursive4']
    OR: List['TodoWhereInputRecursive4']
    NOT: List['TodoWhereInputRecursive4']


class TodoWhereInputRecursive4(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    text: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']



# aggregate Todo types


    

class TodoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TodoScalarWhereWithAggregatesInputRecursive1']
    OR: List['TodoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TodoScalarWhereWithAggregatesInputRecursive1']


class TodoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TodoScalarWhereWithAggregatesInputRecursive2']
    OR: List['TodoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TodoScalarWhereWithAggregatesInputRecursive2']


class TodoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TodoScalarWhereWithAggregatesInputRecursive3']
    OR: List['TodoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TodoScalarWhereWithAggregatesInputRecursive3']


class TodoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TodoScalarWhereWithAggregatesInputRecursive4']
    OR: List['TodoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TodoScalarWhereWithAggregatesInputRecursive4']


class TodoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Todo arguments for searching"""
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class TodoGroupByOutput(TypedDict, total=False):
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    text: _str
    status: _str
    userId: _str
    _sum: 'TodoSumAggregateOutput'
    _avg: 'TodoAvgAggregateOutput'
    _min: 'TodoMinAggregateOutput'
    _max: 'TodoMaxAggregateOutput'
    _count: 'TodoCountAggregateOutput'


class TodoAvgAggregateOutput(TypedDict, total=False):
    """Todo output for aggregating averages"""
    id: float


class TodoSumAggregateOutput(TypedDict, total=False):
    """Todo output for aggregating sums"""
    id: _int


class TodoScalarAggregateOutput(TypedDict, total=False):
    """Todo output including scalar fields"""
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    text: _str
    status: _str
    userId: _str


TodoMinAggregateOutput = TodoScalarAggregateOutput
TodoMaxAggregateOutput = TodoScalarAggregateOutput


class TodoMaxAggregateInput(TypedDict, total=False):
    """Todo input for aggregating by max"""
    createdAt: bool
    updatedAt: bool
    id: bool
    text: bool
    status: bool
    userId: bool


class TodoMinAggregateInput(TypedDict, total=False):
    """Todo input for aggregating by min"""
    createdAt: bool
    updatedAt: bool
    id: bool
    text: bool
    status: bool
    userId: bool


class TodoNumberAggregateInput(TypedDict, total=False):
    """Todo input for aggregating numbers"""
    id: bool


TodoAvgAggregateInput = TodoNumberAggregateInput
TodoSumAggregateInput = TodoNumberAggregateInput


TodoCountAggregateInput = TypedDict(
    'TodoCountAggregateInput',
    {
        'createdAt': bool,
        'updatedAt': bool,
        'id': bool,
        'text': bool,
        'status': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

TodoCountAggregateOutput = TypedDict(
    'TodoCountAggregateOutput',
    {
        'createdAt': int,
        'updatedAt': int,
        'id': int,
        'text': int,
        'status': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


TodoKeys = Literal[
    'createdAt',
    'updatedAt',
    'id',
    'text',
    'status',
    'user',
    'userId',
]
TodoScalarFieldKeys = Literal[
    'createdAt',
    'updatedAt',
    'id',
    'text',
    'status',
    'userId',
]
TodoScalarFieldKeysT = TypeVar('TodoScalarFieldKeysT', bound=TodoScalarFieldKeys)

TodoRelationalFieldKeys = Literal[
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields